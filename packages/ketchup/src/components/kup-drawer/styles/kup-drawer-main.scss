/**
* @prop --kup-drawer-backdrop: Backdrop of the component when in slide mode.
* @prop --kup-drawer-box-shadow: Box shadow of the component when in slide mode.
* @prop --kup-drawer-permanent-border: Border of the drawer in permanent mode.
* @prop --kup-drawer-slide-transition: Horizontal transition's duration when in slide mode.
* @prop --kup-drawer-transition: Transitions duration.
*/

:host {
  --kup_drawer_backdrop: var(--kup-drawer-backdrop, rgba(0, 0, 0, 0.32));
  --kup_drawer_box_shadow: var(
    --kup-drawer-box-shadow,
    0 8px 10px -5px rgba(0, 0, 0, 0.2),
    0 16px 24px 2px rgba(0, 0, 0, 0.14),
    0 6px 30px 5px rgba(0, 0, 0, 0.12)
  );

  --kup_drawer_slotted_color: var(
    --kup-drawer-slotted-color,
    var(--kup-text-secondary)
  );
  --kup_drawer_background_color: var(
    --kup-drawer-background-color,
    var(--kup-layer-1)
  );
  --kup_drawer_permanent_border: var(
    --kup-drawer-permanent-border,
    1px solid var(--kup-border-subtle)
  );
  --kup_drawer_slide_transition: var(--kup-drawer-slide-transition, 300ms);
  --kup_drawer_transition: var(--kup-drawer-transition, 250ms);

  box-shadow: var(--kup_drawer_box_shadow);
  display: block;
  height: 100vh;
  left: calc(var(--kup-drawer-width) * -1);
  position: fixed;
  top: 0;
  transition: left var(--kup_drawer_slide_transition)
      cubic-bezier(0.4, 0, 0.2, 1),
    right var(--kup_drawer_slide_transition) cubic-bezier(0.4, 0, 0.2, 1);
  width: var(--kup-drawer-width);
  z-index: var(--kup-drawer-zindex);
}

#kup-component {
  height: 100%;
  width: 100%;
}

.backdrop {
  background: var(--kup_drawer_backdrop);
  display: none;
  height: 100%;
  left: 0;
  position: fixed;
  top: 0;
  width: 100%;
  z-index: var(--kup-drawer-zindex);
}

.drawer {
  height: 100%;
  position: fixed;
  width: var(--kup-drawer-width);
  z-index: calc(var(--kup-drawer-zindex) + 1);

  &__content {
    background-color: var(--kup_drawer_background_color);
    box-sizing: border-box;
    height: 100%;
    overflow-y: auto;
    width: 100%;
  }

  ::slotted(*) {
    --kup-button-primary-color: var(--kup_drawer_slotted_color);
    --kup-button-primary-color-rgb: var(--kup_drawer_slotted_color-rgb);
    --kup-button-primary-color-h: var(--kup_drawer_slotted_color-h);
    --kup-button-primary-color-s: var(--kup_drawer_slotted_color-s);
    --kup-button-primary-color-l: var(--kup_drawer_slotted_color-l);
    --kup-switch-label-color: var(--kup_drawer_slotted_color);
    --kup-switch-primary-color: var(--kup_drawer_slotted_color);
    --kup-switch-primary-color-rgb: var(--kup_drawer_slotted_color-rgb);
    --kup-textfield-color: var(--kup_drawer_slotted_color);
    --kup-textfield-color-rgb: var(--kup_drawer_slotted_color-rgb);
    --kup-textfield-primary-color: var(--kup_drawer_slotted_color);
    --kup-textfield-primary-color-rgb: var(--kup_drawer_slotted_color-rgb);
    --kup-tree-color: var(--kup_drawer_slotted_color);
    --kup-tree-color-rgb: var(--kup_drawer_slotted_color-rgb);
    --kup-tree-filter-background-color: var(--kup-drawer-background-color);
    --kup-tree-icon-color: var(--kup_drawer_slotted_color);

    color: var(--kup_drawer_slotted_color);
    fill: var(--kup_drawer_slotted_color);
  }
}

:host([kup-opened]) {
  left: 0;

  .backdrop {
    display: block;
  }
}
